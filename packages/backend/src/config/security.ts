export const securityConfig = {\n  // JWT Configuration\n  jwt: {\n    accessTokenExpiry: '15m',\n    refreshTokenExpiry: '7d',\n    issuer: 'garcon-api',\n    audience: 'garcon-app',\n    algorithm: 'HS256' as const,\n  },\n\n  // Password Policy\n  password: {\n    minLength: 8,\n    maxLength: 128,\n    requireUppercase: true,\n    requireLowercase: true,\n    requireNumbers: true,\n    requireSpecialChars: true,\n    specialChars: '@$!%*?&',\n    maxAttempts: 5,\n    lockoutDuration: 15 * 60 * 1000, // 15 minutes\n  },\n\n  // Rate Limiting\n  rateLimiting: {\n    // General API rate limit\n    api: {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 100, // requests per window\n    },\n    \n    // Authentication endpoints\n    auth: {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 5, // attempts per window\n    },\n    \n    // Payment endpoints\n    payment: {\n      windowMs: 60 * 60 * 1000, // 1 hour\n      max: 20, // attempts per window\n    },\n    \n    // Strict rate limiting for sensitive operations\n    strict: {\n      windowMs: 60 * 1000, // 1 minute\n      max: 10, // requests per window\n    },\n  },\n\n  // CORS Configuration\n  allowedOrigins: [\n    'http://localhost:3000',\n    'http://localhost:3001',\n    'https://garcon-app.com',\n    'https://admin.garcon-app.com',\n    'https://api.garcon-app.com',\n    // Add production domains here\n  ],\n\n  // IP Filtering\n  whitelistedIPs: [\n    // Add whitelisted IPs here if needed\n    // '192.168.1.0/24', // Example: Local network\n  ],\n  \n  blacklistedIPs: [\n    // Add known malicious IPs here\n    // These would typically be populated from threat intelligence feeds\n  ],\n\n  // Request Size Limits\n  requestLimits: {\n    json: '10mb',\n    urlencoded: '10mb',\n    raw: '10mb',\n    text: '10mb',\n    fileUpload: '50mb',\n  },\n\n  // Session Configuration\n  session: {\n    name: 'garcon.sid',\n    secret: process.env.SESSION_SECRET || 'change-this-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'strict' as const,\n    },\n  },\n\n  // Encryption\n  encryption: {\n    algorithm: 'aes-256-gcm',\n    keyLength: 32,\n    ivLength: 16,\n    tagLength: 16,\n  },\n\n  // File Upload Security\n  fileUpload: {\n    allowedMimeTypes: [\n      'image/jpeg',\n      'image/png',\n      'image/webp',\n      'image/gif',\n      'application/pdf',\n    ],\n    maxFileSize: 50 * 1024 * 1024, // 50MB\n    maxFiles: 10,\n    allowedExtensions: ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.pdf'],\n    scanForMalware: true,\n  },\n\n  // Database Security\n  database: {\n    connectionTimeout: 30000,\n    queryTimeout: 30000,\n    maxConnections: 20,\n    ssl: process.env.NODE_ENV === 'production',\n    encryptSensitiveFields: true,\n  },\n\n  // API Security\n  api: {\n    requireApiKey: false, // Set to true if using API keys\n    apiKeyHeader: 'X-API-Key',\n    requireUserAgent: true,\n    blockSuspiciousUserAgents: true,\n    suspiciousUserAgents: [\n      /sqlmap/i,\n      /nikto/i,\n      /nmap/i,\n      /masscan/i,\n      /nessus/i,\n      /openvas/i,\n      /w3af/i,\n      /skipfish/i,\n      /burp/i,\n      /owasp/i,\n    ],\n  },\n\n  // Monitoring and Alerting\n  monitoring: {\n    enableRealTimeAlerts: true,\n    alertWebhookUrl: process.env.SECURITY_ALERT_WEBHOOK,\n    alertEmail: process.env.SECURITY_ALERT_EMAIL,\n    logRetentionDays: 90,\n    enableMetrics: true,\n    metricsInterval: 60000, // 1 minute\n  },\n\n  // Content Security Policy\n  csp: {\n    defaultSrc: [\"'self'\"],\n    styleSrc: [\"'self'\", \"'unsafe-inline'\", 'https://fonts.googleapis.com'],\n    fontSrc: [\"'self'\", 'https://fonts.gstatic.com'],\n    imgSrc: [\"'self'\", 'data:', 'https:'],\n    scriptSrc: [\"'self'\"],\n    connectSrc: [\"'self'\", 'wss:', 'https:'],\n    frameSrc: [\"'none'\"],\n    objectSrc: [\"'none'\"],\n    upgradeInsecureRequests: true,\n  },\n\n  // Security Headers\n  headers: {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\n    'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n  },\n\n  // Input Validation\n  validation: {\n    maxStringLength: 10000,\n    maxArrayLength: 1000,\n    maxObjectDepth: 10,\n    allowedHtmlTags: [], // No HTML tags allowed by default\n    sanitizeInput: true,\n    validateUUIDs: true,\n  },\n\n  // Audit Logging\n  audit: {\n    logAllRequests: false,\n    logFailedRequests: true,\n    logSecurityEvents: true,\n    logBusinessEvents: true,\n    encryptLogs: true,\n    logRetentionDays: 365,\n    enableRealTimeMonitoring: true,\n  },\n\n  // Threat Detection\n  threatDetection: {\n    enableBehaviorAnalysis: true,\n    enableAnomalyDetection: true,\n    enableGeolocationChecks: true,\n    enableDeviceFingerprintingChecks: true,\n    suspiciousActivityThreshold: 3,\n    autoBlockThreshold: 5,\n    blockDuration: 3600, // 1 hour in seconds\n  },\n\n  // Payment Security\n  payment: {\n    requireCVV: true,\n    require3DS: true,\n    enableFraudDetection: true,\n    maxDailyAmount: 10000, // $10,000\n    maxTransactionAmount: 1000, // $1,000\n    enableVelocityChecks: true,\n    suspiciousPatterns: [\n      'rapid_successive_payments',\n      'unusual_amounts',\n      'foreign_cards',\n      'multiple_failed_attempts',\n    ],\n  },\n\n  // Environment-specific overrides\n  development: {\n    enableDebugLogs: true,\n    disableRateLimiting: false,\n    allowInsecureConnections: true,\n    enableCORS: true,\n  },\n\n  production: {\n    enableDebugLogs: false,\n    disableRateLimiting: false,\n    allowInsecureConnections: false,\n    enableCORS: false,\n    requireHTTPS: true,\n    enableHSTS: true,\n  },\n\n  // Feature Flags for Security Features\n  features: {\n    enableTwoFactorAuth: false, // Future feature\n    enableBiometricAuth: false, // Future feature\n    enableAdvancedThreatProtection: true,\n    enableRealTimeMonitoring: true,\n    enableAutomaticBlocking: true,\n    enableGeoBlocking: false, // Future feature\n  },\n};\n\n// Environment-specific configuration\nconst env = process.env.NODE_ENV || 'development';\n\nif (env === 'production') {\n  // Override with production-specific settings\n  Object.assign(securityConfig, securityConfig.production);\n} else if (env === 'development') {\n  // Override with development-specific settings\n  Object.assign(securityConfig, securityConfig.development);\n}\n\n// Validate required environment variables\nconst requiredEnvVars = [\n  'JWT_SECRET',\n  'JWT_REFRESH_SECRET',\n  'DATABASE_URL',\n  'REDIS_URL',\n];\n\nif (env === 'production') {\n  requiredEnvVars.push(\n    'SESSION_SECRET',\n    'AUDIT_ENCRYPTION_KEY',\n    'SECURITY_ALERT_EMAIL'\n  );\n}\n\nfor (const envVar of requiredEnvVars) {\n  if (!process.env[envVar]) {\n    throw new Error(`Required environment variable ${envVar} is not set`);\n  }\n}\n\nexport default securityConfig;"