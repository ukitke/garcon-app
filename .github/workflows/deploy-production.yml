name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: garcon-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Run linting
        run: npm run lint

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f packages/backend/Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: infrastructure/terraform
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_certificate_arn: ${{ secrets.CERTIFICATE_ARN }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_environment: production
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infrastructure/terraform
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_certificate_arn: ${{ secrets.CERTIFICATE_ARN }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_environment: production
        run: terraform apply -auto-approve tfplan

      - name: Update ECS Service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update task definition with new image
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $PROJECT_NAME-backend --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
          
          # Update service
          aws ecs update-service --cluster $PROJECT_NAME-cluster --service $PROJECT_NAME-backend --task-definition $PROJECT_NAME-backend:$NEW_REVISION

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable --cluster $PROJECT_NAME-cluster --services $PROJECT_NAME-backend

      - name: Run smoke tests
        run: |
          # Get load balancer DNS
          LB_DNS=$(cd infrastructure/terraform && terraform output -raw load_balancer_dns)
          
          # Wait for health check
          echo "Waiting for application to be healthy..."
          for i in {1..30}; do
            if curl -f -s "https://$LB_DNS/health" > /dev/null; then
              echo "‚úÖ Application is healthy!"
              break
            fi
            echo "‚è≥ Attempt $i/30 - waiting for application..."
            sleep 10
          done

      - name: Notify deployment success
        if: success()
        run: |
          LB_DNS=$(cd infrastructure/terraform && terraform output -raw load_balancer_dns)
          echo "üéâ Deployment successful! Application available at: https://$LB_DNS"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed! Check the logs for details."